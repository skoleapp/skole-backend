name: "CI"
on: pull_request
jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout code (pre merge)"
      uses: actions/checkout@v2
      with:
        # Checkout the current commit instead of the commit that would get
        # made when the PR would be merged, since we want to validate that
        # the branch doesn't contain any merge commits and is rebased correctly.
        # We also fetch all the objects here so that we can do the comparisons.
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: "Check commits of the PR branch"
      run: ./.github/check_commits.sh

    - name: "Checkout code (post merge)"
      uses: actions/checkout@v2

    - name: "Login to Dockerhub"
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: "Pull the image"
      # Avoid caching pull-only images,since pullign is faster than caching in most cases.
      run: docker-compose --file .github/docker-compose-ci.yml pull

    - name: "Setup Docker layer cache"
      uses: satackey/action-docker-layer-caching@v0.0.11
      # Don't terminate if fetching from the cache fails.
      continue-on-error: true

    - name: "Build the image"
      run: docker-compose --file .github/docker-compose-ci.yml build

    - name: "Run linters, type-check, and tests"
      run: >
        docker-compose --file .github/docker-compose-ci.yml up --abort-on-container-exit
        && docker cp backend-ci:/home/user/app/coverage.xml .

    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
