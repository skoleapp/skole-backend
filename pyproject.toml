[tool.poetry]
name = "skole"
version = "1.0.0"
description = ""
authors = ["Skole <admin@test.test>"]

[tool.poetry.dependencies]
python = "^3.9"
dj-database-url = "0.5.0"
Django = "3.1.7"
django-amazon-ses = "4.0.0"
django-autoslug = "1.9.8"
django-cors-headers = "3.7.0"
django-graphql-jwt = "0.3.1"
django-imagekit = "4.0.2"
django-parler = "2.2.0"
django-s3-storage = "0.13.4"
fcm-django = "0.3.7"
graphene-django = "2.15.0"
gunicorn = "20.0.4"
mat2 = "0.11.0"
Pillow = "8.1.2"
psycopg2 = "2.8.6"
PyJWT = "1.7.1"  # Pinned peer dependency, otherwise `django-graphql-jwt` would pull an incompatible version.
python-magic = "0.4.22"
PyYAML = "5.4.1"
requests = "2.25.1"

[tool.poetry.dev-dependencies]
autoflake = "1.4.0"
black = "20.8b1"
django-stubs = "1.7.0"
docformatter = "1.4.0"
flake8 = "3.9.0"
isort = "5.7.0"
mypy = "0.812"
pylint = "2.7.2"
pytest = "6.2.2"
pytest-cov = "2.11.1"
pytest-django = "4.1.0"


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
django_debug_mode = "keep"
addopts = "--nomigrations --doctest-modules"


[tool.coverage.run]
branch = true
omit = [
    "*/migrations/*",
    "*/tests/*",
    "manage.py",  # Will get tested just fine when running migrations, compiling messages etc in the CI.
]


[tool.black]
exclude = "migrations/.*"


[tool.isort]
include_trailing_comma = true
line_length = 88
multi_line_output = 3  # Use a vertical hanging indent.
skip_glob = "*/migrations/*"


[tool.pylint.master]
ignore = "migrations"
jobs = 0  # Use 1 process per CPU core.

[tool.pylint.messages_control]
enable = [
    "useless-suppression",             # Nice to get rid of unnecesary `pylint: disable` comments.
]
disable = [
    "duplicate-code",                  # This could be fine with less aggressive settings.
    "fixme",                           # No point in not allowing this style of comments.
    "invalid-name",                    # `qs`, `db`, and `T` are all just fine names.
    "line-too-long",                   # Black handles this.
    "logging-fstring-interpolation",   # No point in using %s formatting, f-strings are just nicer: https://github.com/PyCQA/pylint/issues/1788#issuecomment-406135335
    "missing-docstring",               # Just insane.
    "no-else-return",                  # Can often make the code clearer.
    "no-member",                       # Doesn't play well with e.g. parler translated fields.
    "redefined-builtin",               # We are using `id` and `input` as idiomatic GraphQL parameter names.
    "too-few-public-methods",          # Single method mixins can be really useful, also our `constants.py` has tons of these classes.
    "too-many-ancestors",              # Doesn't play well with our style of heavy use of mixins and multiple inheritance.
    "too-many-arguments",              # Can be judged manually, most often completely valid.
    "ungrouped-imports",               # Can be valid when using `if TYPE_CHECKING` and anyways `isort` handles this.
    "unsubscriptable-object",          # There's currently a bug where every `Optional[Foo]` errors: https://github.com/PyCQA/pylint/issues/3882
    "unused-argument",                 # Often an argument (e.g. `root`) just has to be there even if it's not used.
]

[tool.pylint.classes]
valid-metaclass-classmethod-first-arg = "mcs"
