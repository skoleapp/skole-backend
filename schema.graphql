schema {
  query: Query
  mutation: Mutation
}

type ActivityObjectType {
  id: ID!
  targetUser: UserObjectType
  course: CourseObjectType
  resource: ResourceObjectType
  comment: CommentObjectType
  read: Boolean
  description: String
}

type BadgeObjectType {
  id: ID!
  name: String
  description: String
}

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

type CityObjectType {
  id: ID!
  name: String
}

type CommentObjectType {
  id: ID!
  user: UserObjectType
  text: String!
  attachment: String!
  course: CourseObjectType
  resource: ResourceObjectType
  comment: CommentObjectType
  modified: DateTime!
  created: DateTime!
  replyComments: [CommentObjectType!]!
  score: Int
  vote: VoteObjectType
}

input ContactMutationInput {
  subject: String!
  name: String
  email: String!
  message: String!
  clientMutationId: String
}

type ContactMutationPayload {
  subject: String!
  name: String
  email: String!
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

type CountryObjectType {
  id: ID!
  name: String
}

type CourseObjectType {
  id: ID!
  name: String!
  code: String!
  subjects: [SubjectObjectType!]!
  school: SchoolObjectType!
  user: UserObjectType
  modified: DateTime!
  created: DateTime!
  comments: [CommentObjectType!]!
  resources: [ResourceObjectType!]!
  starred: Boolean
  score: Int
  vote: VoteObjectType
}

input CreateCommentMutationInput {
  text: String
  attachment: String
  course: ID
  resource: ID
  comment: ID
  clientMutationId: String
}

type CreateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input CreateCourseMutationInput {
  name: String!
  code: String
  subjects: [ID]
  school: ID!
  clientMutationId: String
}

type CreateCourseMutationPayload {
  course: CourseObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input CreateResourceMutationInput {
  title: String!
  file: String!
  resourceType: ID!
  course: ID!
  date: Date
  clientMutationId: String
}

type CreateResourceMutationPayload {
  resource: ResourceObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

scalar Date

scalar DateTime

input DeleteCommentMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteCommentMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteCourseMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteCourseMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteResourceMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteResourceMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteUserMutationInput {
  password: String!
  clientMutationId: String
}

type DeleteUserMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input LoginMutationInput {
  usernameOrEmail: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

type LogoutMutation {
  deleted: Boolean!
}

input MarkActivityReadMutationInput {
  read: Boolean
  id: ID
  clientMutationId: String
}

type MarkActivityReadMutationPayload {
  activity: ActivityObjectType
  errors: [ErrorType]
  clientMutationId: String
}

type MarkAllActivitiesReadMutation {
  errors: [ErrorType]
  activities: [ActivityObjectType]
}

type Mutation {
  performStar(input: StarredMutationInput!): StarredMutationPayload
  performVote(input: VoteMutationInput!): VoteMutationPayload
  register(input: RegisterMutationInput!): RegisterMutationPayload
  verifyAccount(input: VerifyAccountMutationInput!): VerifyAccountMutationPayload
  resendVerificationEmail(input: ResendVerificationEmailMutationInput!): ResendVerificationEmailMutationPayload
  sendPasswordResetEmail(input: SendPasswordResetEmailMutationInput!): SendPasswordResetEmailMutationPayload
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload
  login(input: LoginMutationInput!): LoginMutationPayload
  logout: LogoutMutation
  updateUser(input: UpdateUserMutationInput!): UpdateUserMutationPayload
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload
  deleteUser(input: DeleteUserMutationInput!): DeleteUserMutationPayload
  createResource(input: CreateResourceMutationInput!): CreateResourceMutationPayload
  updateResource(input: UpdateResourceMutationInput!): UpdateResourceMutationPayload
  deleteResource(input: DeleteResourceMutationInput!): DeleteResourceMutationPayload
  createCourse(input: CreateCourseMutationInput!): CreateCourseMutationPayload
  deleteCourse(input: DeleteCourseMutationInput!): DeleteCourseMutationPayload
  createContactMessage(input: ContactMutationInput!): ContactMutationPayload
  createComment(input: CreateCommentMutationInput!): CreateCommentMutationPayload
  updateComment(input: UpdateCommentMutationInput!): UpdateCommentMutationPayload
  deleteComment(input: DeleteCommentMutationInput!): DeleteCommentMutationPayload
  markActivityRead(input: MarkActivityReadMutationInput!): MarkActivityReadMutationPayload
  markAllActivitiesRead: MarkAllActivitiesReadMutation
}

type PaginatedCourseObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [CourseObjectType]
}

type Query {
  user(id: ID): UserObjectType
  userMe: UserObjectType
  autoCompleteSubjects(name: String): [SubjectObjectType]
  subject(id: ID): SubjectObjectType
  autoCompleteSchoolTypes: [SchoolTypeObjectType]
  schoolType(id: ID): SchoolTypeObjectType
  autoCompleteSchools(name: String): [SchoolObjectType]
  school(id: ID): SchoolObjectType
  autoCompleteResourceTypes: [ResourceTypeObjectType]
  resource(id: ID): ResourceObjectType
  autoCompleteCourses(school: ID, name: String): [CourseObjectType]
  searchCourses(courseName: String, courseCode: String, subject: ID, school: ID, schoolType: ID, country: ID, city: ID, page: Int, pageSize: Int, ordering: String): PaginatedCourseObjectType
  course(id: ID): CourseObjectType
  autoCompleteCountries: [CountryObjectType]
  country(id: ID): CountryObjectType
  autoCompleteCities: [CityObjectType]
  city(id: ID): CityObjectType
}

input RegisterMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterMutationPayload {
  message: String
  errors: [ErrorType]
  clientMutationId: String
}

input ResendVerificationEmailMutationInput {
  email: String!
  clientMutationId: String
}

type ResendVerificationEmailMutationPayload {
  email: String!
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input ResetPasswordMutationInput {
  token: String
  newPassword: String!
  clientMutationId: String
}

type ResetPasswordMutationPayload {
  token: String
  newPassword: String!
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

type ResourceObjectType {
  id: ID!
  resourceType: ResourceTypeObjectType
  title: String!
  file: String!
  date: Date!
  course: CourseObjectType!
  downloads: Int!
  user: UserObjectType
  modified: DateTime!
  created: DateTime!
  comments: [CommentObjectType!]!
  starred: Boolean
  score: Int
  vote: VoteObjectType
  school: SchoolObjectType
}

type ResourceTypeObjectType {
  id: ID!
  name: String
}

type SchoolObjectType {
  id: ID!
  schoolType: SchoolTypeObjectType
  city: CityObjectType
  courses: [CourseObjectType!]!
  name: String
  country: CountryObjectType
  subjects: [SubjectObjectType]
}

type SchoolTypeObjectType {
  id: ID!
  name: String
}

input SendPasswordResetEmailMutationInput {
  email: String!
  clientMutationId: String
}

type SendPasswordResetEmailMutationPayload {
  email: String!
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input StarredMutationInput {
  course: ID
  resource: ID
  clientMutationId: String
}

type StarredMutationPayload {
  starred: Boolean
  errors: [ErrorType]
  clientMutationId: String
}

type SubjectObjectType {
  id: ID!
  name: String
}

input UpdateCommentMutationInput {
  text: String
  attachment: String
  id: ID
  clientMutationId: String
}

type UpdateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input UpdateResourceMutationInput {
  title: String!
  resourceType: ID!
  date: Date
  id: ID
  clientMutationId: String
}

type UpdateResourceMutationPayload {
  resource: ResourceObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input UpdateUserMutationInput {
  username: String!
  email: String!
  title: String
  bio: String
  avatar: String
  school: ID
  subject: ID
  clientMutationId: String
}

type UpdateUserMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

type UserObjectType {
  id: ID!
  username: String!
  email: String
  title: String!
  bio: String!
  avatar: String
  score: Int
  created: DateTime!
  verified: Boolean
  activity: [ActivityObjectType]
  createdCourses: [CourseObjectType!]!
  createdResources: [ResourceObjectType!]!
  avatarThumbnail: String
  school: SchoolObjectType
  subject: SubjectObjectType
  rank: String
  badges: [BadgeObjectType]
  starredCourses: [CourseObjectType]
  starredResources: [ResourceObjectType]
}

input VerifyAccountMutationInput {
  token: String
  clientMutationId: String
}

type VerifyAccountMutationPayload {
  token: String
  errors: [ErrorType]
  message: String
  clientMutationId: String
}

input VoteMutationInput {
  status: Int!
  comment: ID
  course: ID
  resource: ID
  clientMutationId: String
}

type VoteMutationPayload {
  vote: VoteObjectType
  errors: [ErrorType]
  targetScore: Int
  clientMutationId: String
}

type VoteObjectType {
  id: ID!
  user: UserObjectType!
  status: Int
  comment: CommentObjectType
  course: CourseObjectType
  resource: ResourceObjectType
}
