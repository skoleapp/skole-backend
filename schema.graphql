schema {
  query: Query
  mutation: Mutation
}

type ActivityObjectType {
  id: ID!
  causingUser: UserObjectType
  comment: CommentObjectType
  badgeProgress: BadgeProgressObjectType
  read: Boolean
  description: String
}

type BadgeObjectType {
  id: ID!
  tier: BadgeTier!
  name: String!
  description: String!
}

type BadgeProgressObjectType {
  badge: BadgeObjectType!
  user: UserObjectType!
  progress: Int!
  steps: Int
}

enum BadgeTier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

type CommentObjectType {
  id: ID!
  user: UserObjectType
  text: String!
  file: String!
  image: String!
  thread: ThreadObjectType
  comment: CommentObjectType
  score: Int
  modified: DateTime!
  created: DateTime!
  replyComments: [CommentObjectType!]!
  vote: VoteObjectType
  replyCount: Int
  imageThumbnail: String
  isOwn: Boolean!
}

input ContactMutationInput {
  subject: String
  name: String
  email: String
  message: String!
  clientMutationId: String
}

type ContactMutationPayload {
  subject: String
  name: String
  email: String
  message: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input CreateCommentMutationInput {
  user: ID
  text: String
  file: String
  image: String
  thread: ID
  comment: ID
  clientMutationId: String
}

type CreateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input CreateThreadMutationInput {
  title: String!
  text: String
  image: String
  user: ID
  clientMutationId: String
}

type CreateThreadMutationPayload {
  thread: ThreadObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

scalar Date

scalar DateTime

input DeleteCommentMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteCommentMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteThreadMutationInput {
  id: ID
  clientMutationId: String
}

type DeleteThreadMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteUserMutationInput {
  password: String!
  clientMutationId: String
}

type DeleteUserMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

type InviteCodeObjectType {
  code: String!
  usages: Int!
}

input LoginMutationInput {
  usernameOrEmail: String!
  password: String!
  clientMutationId: String
}

type LoginMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  successMessage: String
  inviteCodeRequired: Boolean
  clientMutationId: String
}

type LogoutMutation {
  deleted: Boolean!
}

input MarkActivityAsReadMutationInput {
  read: Boolean
  id: ID
  clientMutationId: String
}

type MarkActivityAsReadMutationPayload {
  activity: ActivityObjectType
  errors: [ErrorType]
  clientMutationId: String
}

type MarkAllActivitiesAsReadMutation {
  errors: [ErrorType]
  activities: PaginatedActivityObjectType
}

type Mutation {
  star(input: StarMutationInput!): StarMutationPayload
  vote(input: VoteMutationInput!): VoteMutationPayload
  register(input: RegisterMutationInput!): RegisterMutationPayload
  verifyAccount(input: VerifyAccountMutationInput!): VerifyAccountMutationPayload
  verifyBackupEmail(input: VerifyBackupEmailMutationInput!): VerifyBackupEmailMutationPayload
  useInviteCode(input: UseInviteCodeMutationInput!): UseInviteCodeMutationPayload
  resendVerificationEmail: ResendVerificationEmailMutation
  resendBackupEmailVerificationEmail: ResendBackupEmailVerificationEmailMutation
  sendPasswordResetEmail(input: SendPasswordResetEmailMutationInput!): SendPasswordResetEmailMutationPayload
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload
  login(input: LoginMutationInput!): LoginMutationPayload
  logout: LogoutMutation
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload
  updateProfile(input: UpdateProfileMutationInput!): UpdateProfileMutationPayload
  updateAccountSettings(input: UpdateAccountSettingsMutationInput!): UpdateAccountSettingsMutationPayload
  deleteUser(input: DeleteUserMutationInput!): DeleteUserMutationPayload
  updateSelectedBadge(input: UpdateSelectedBadgeMutationInput!): UpdateSelectedBadgeMutationPayload
  registerFcmToken(input: RegisterFCMTokenMutationInput!): RegisterFCMTokenMutationPayload
  myData: MyDataMutation
  createThread(input: CreateThreadMutationInput!): CreateThreadMutationPayload
  deleteThread(input: DeleteThreadMutationInput!): DeleteThreadMutationPayload
  createContactMessage(input: ContactMutationInput!): ContactMutationPayload
  createComment(input: CreateCommentMutationInput!): CreateCommentMutationPayload
  updateComment(input: UpdateCommentMutationInput!): UpdateCommentMutationPayload
  deleteComment(input: DeleteCommentMutationInput!): DeleteCommentMutationPayload
  markActivityAsRead(input: MarkActivityAsReadMutationInput!): MarkActivityAsReadMutationPayload
  markAllActivitiesAsRead: MarkAllActivitiesAsReadMutation
}

type MyDataMutation {
  successMessage: String
  errors: [ErrorType]
}

type PaginatedActivityObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [ActivityObjectType]
}

type PaginatedCommentObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [CommentObjectType]
}

type PaginatedThreadObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [ThreadObjectType]
}

type Query {
  badges: [BadgeObjectType]
  comments(user: String, thread: String, comment: ID, ordering: String, page: Int, pageSize: Int): PaginatedCommentObjectType
  userMe: UserObjectType
  user(slug: String): UserObjectType
  sitemap: SitemapObjectType
  threads(searchTerm: String, user: String, ordering: String, page: Int, pageSize: Int): PaginatedThreadObjectType
  starredThreads(page: Int, pageSize: Int): PaginatedThreadObjectType
  thread(slug: String): ThreadObjectType
  activities(page: Int, pageSize: Int): PaginatedActivityObjectType
  activityPreview: [ActivityObjectType]
}

input RegisterFCMTokenMutationInput {
  token: String
  clientMutationId: String
}

type RegisterFCMTokenMutationPayload {
  token: String
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input RegisterMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  invalidEmailDomain: Boolean
  successMessage: String
  clientMutationId: String
}

type ResendBackupEmailVerificationEmailMutation {
  successMessage: String
  errors: [ErrorType]
}

type ResendVerificationEmailMutation {
  successMessage: String
  errors: [ErrorType]
}

input ResetPasswordMutationInput {
  token: String
  newPassword: String!
  clientMutationId: String
}

type ResetPasswordMutationPayload {
  token: String
  newPassword: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input SendPasswordResetEmailMutationInput {
  email: String!
  clientMutationId: String
}

type SendPasswordResetEmailMutationPayload {
  email: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

type SitemapEntryObjectType {
  slug: String
  modified: Date
}

type SitemapObjectType {
  threads: [SitemapEntryObjectType!]!
  users: [SitemapEntryObjectType!]!
}

input StarMutationInput {
  thread: ID!
  clientMutationId: String
}

type StarMutationPayload {
  star: StarObjectType
  errors: [ErrorType]
  starred: Boolean
  clientMutationId: String
}

type StarObjectType {
  id: ID!
  user: UserObjectType!
  thread: ThreadObjectType!
}

type ThreadObjectType {
  id: ID!
  title: String!
  text: String!
  slug: String
  image: String!
  user: UserObjectType
  score: Int
  views: Int!
  modified: DateTime!
  created: DateTime!
  starred: Boolean
  vote: VoteObjectType
  starCount: Int
  commentCount: Int
  imageThumbnail: String
}

input UpdateAccountSettingsMutationInput {
  email: String!
  backupEmail: String
  commentReplyEmailPermission: Boolean
  threadCommentEmailPermission: Boolean
  newBadgeEmailPermission: Boolean
  commentReplyPushPermission: Boolean
  threadCommentPushPermission: Boolean
  newBadgePushPermission: Boolean
  clientMutationId: String
}

type UpdateAccountSettingsMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  invalidEmailDomain: Boolean
  successMessage: String
  clientMutationId: String
}

input UpdateCommentMutationInput {
  text: String
  file: String
  image: String
  id: ID
  clientMutationId: String
}

type UpdateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input UpdateProfileMutationInput {
  username: String!
  title: String
  bio: String
  avatar: String
  clientMutationId: String
}

type UpdateProfileMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input UpdateSelectedBadgeMutationInput {
  id: ID
  clientMutationId: String
}

type UpdateSelectedBadgeMutationPayload {
  badgeProgress: BadgeProgressObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input UseInviteCodeMutationInput {
  usernameOrEmail: String!
  code: String!
  clientMutationId: String
}

type UseInviteCodeMutationPayload {
  usernameOrEmail: String!
  code: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

type UserObjectType {
  id: ID!
  slug: String
  username: String!
  email: String
  backupEmail: String
  title: String!
  bio: String!
  avatar: String!
  selectedBadgeProgress: BadgeProgressObjectType
  score: Int!
  verified: Boolean
  created: DateTime!
  modified: DateTime!
  commentReplyEmailPermission: Boolean
  threadCommentEmailPermission: Boolean
  newBadgeEmailPermission: Boolean
  commentReplyPushPermission: Boolean
  threadCommentPushPermission: Boolean
  newBadgePushPermission: Boolean
  views: Int!
  badgeProgresses: [BadgeProgressObjectType]
  inviteCode: InviteCodeObjectType
  threadCount: Int
  commentCount: Int
  avatarThumbnail: String
  verifiedBackupEmail: Boolean
  rank: String
  badges: [BadgeObjectType]
  unreadActivityCount: Int
  fcmTokens: [String!]
}

input VerifyAccountMutationInput {
  token: String
  clientMutationId: String
}

type VerifyAccountMutationPayload {
  token: String
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input VerifyBackupEmailMutationInput {
  token: String
  clientMutationId: String
}

type VerifyBackupEmailMutationPayload {
  token: String
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input VoteMutationInput {
  status: Int!
  comment: ID
  thread: ID
  clientMutationId: String
}

type VoteMutationPayload {
  vote: VoteObjectType
  errors: [ErrorType]
  targetScore: Int
  clientMutationId: String
}

type VoteObjectType {
  id: ID!
  user: UserObjectType
  status: Int
  comment: CommentObjectType
  thread: ThreadObjectType
}
